{
	"info": {
		"_postman_id": "40c0fdce-a6e5-4ae3-9c64-d319c68cdc27",
		"name": "NodejsAPI_Backend",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "28550380"
	},
	"item": [
		{
			"name": "Login",
			"item": [
				{
					"name": "Login – Valid credentials– Success",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Save token to collection variable\r",
									"const res = pm.response.json();\r",
									"pm.collectionVariables.set(\"authToken\", res.token);\r",
									"\r",
									"// Test scripts for the response\r",
									"pm.test(\"Response status code is 200\", () => {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 500ms\", () => {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
									"});\r",
									"\r",
									"pm.test(\"Response body contains name, token, and message\", () => {\r",
									"    pm.expect(res).to.have.all.keys(\"name\", \"token\", \"message\");\r",
									"});\r",
									"\r",
									"pm.test(\"Token is a non-empty string\", () => {\r",
									"    pm.expect(res.token).to.be.a(\"string\").and.to.not.be.empty;\r",
									"});\r",
									"\r",
									"pm.test(\"Response Message is 'Login Successful'\", () => {\r",
									"    pm.expect(res.message).to.equal(\"Login Successful\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "JWT_KEY",
								"value": "demmyTest101",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\": \"ridwan1@mailinator.com\",\r\n    \"password\": \"123456\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:4000/api/user/login",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "4000",
							"path": [
								"api",
								"user",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Login – Empty password field– Error",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"const res = pm.response.json();\r",
									"\r",
									"pm.test(\"Response status code is 500\", () => {\r",
									"    pm.response.to.have.status(500);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 3000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(3000);\r",
									"});\r",
									"\r",
									"pm.test(\"Response message is correct\", function () {\r",
									"    pm.expect(res.message).to.exist;\r",
									"    pm.expect(res.message).to.equal(\"Invalid Password\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "JWT_KEY",
								"value": "demmyTest101",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\": \"ridwan1@mailinator.com\",\r\n    \"password\": \"\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:4000/api/user/login",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "4000",
							"path": [
								"api",
								"user",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Login – Empty email field– Error",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"const res = pm.response.json();\r",
									"\r",
									"pm.test(\"Response status code is 500\", () => {\r",
									"    pm.response.to.have.status(500);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 3000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(3000);\r",
									"});\r",
									"\r",
									"pm.test(\"Response message is correct\", function () {\r",
									"    pm.expect(res.message).to.exist;\r",
									"    pm.expect(res.message).to.equal(\"Email does not exist\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "JWT_KEY",
								"value": "demmyTest101",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\": \"\",\r\n    \"password\": \"123456\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:4000/api/user/login",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "4000",
							"path": [
								"api",
								"user",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Login – Invalid password– Error",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"const res = pm.response.json();\r",
									"\r",
									"pm.test(\"Response status code is 500\", () => {\r",
									"    pm.response.to.have.status(500);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 3000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(3000);\r",
									"});\r",
									"\r",
									"pm.test(\"Response message is correct\", function () {\r",
									"    pm.expect(res.message).to.exist;\r",
									"    pm.expect(res.message).to.equal(\"Invalid Password\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "JWT_KEY",
								"value": "demmyTest101",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\": \"ridwan1@mailinator.com\",\r\n    \"password\": \"1234\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:4000/api/user/login",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "4000",
							"path": [
								"api",
								"user",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Login – Invalid email– Error",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"const res = pm.response.json();\r",
									"\r",
									"pm.test(\"Response status code is 500\", () => {\r",
									"    pm.response.to.have.status(500);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 3000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(3000);\r",
									"});\r",
									"\r",
									"pm.test(\"Response message is correct\", function () {\r",
									"    pm.expect(res.message).to.exist;\r",
									"    pm.expect(res.message).to.equal(\"Email does not exist\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "JWT_KEY",
								"value": "demmyTest101",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\": \"ridwan109271@mailinator.com\",\r\n    \"password\": \"123456\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:4000/api/user/login",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "4000",
							"path": [
								"api",
								"user",
								"login"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Items",
			"item": [
				{
					"name": "Get Items – Valid inputs– Success",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const res = pm.response.json();\r",
									"\r",
									"pm.expect(pm.response.code).to.equal(200);\r",
									"\r",
									"pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"\r",
									"pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');\r",
									"\r",
									"pm.expect(res).to.have.all.keys('_id', 'fullname', 'email', 'postCount', 'createdAt', 'updatedAt', '__v', 'Posts', 'id');\r",
									"pm.expect(res.fullname).to.be.a('string');\r",
									"pm.expect(res.email).to.be.a('string');\r",
									"pm.expect(res.postCount).to.be.a('number');\r",
									"pm.expect(res.createdAt).to.be.a('string');\r",
									"pm.expect(res.updatedAt).to.be.a('string');\r",
									"pm.expect(res.Posts).to.be.an('array');\r",
									"\r",
									"res.Posts.forEach(post => {\r",
									"    pm.expect(post).to.have.all.keys('_id', 'title', 'description', 'author', 'createdAt', 'updatedAt', '__v');\r",
									"    pm.expect(post.title).to.be.a('string');\r",
									"    pm.expect(post.description).to.be.a('string');\r",
									"    pm.expect(post.author).to.be.a('string');\r",
									"    pm.expect(post.createdAt).to.be.a('string');\r",
									"    pm.expect(post.updatedAt).to.be.a('string');\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseURL}}/api/user/myPosts",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"api",
								"user",
								"myPosts"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Items –  Invalid BearerToken– Error",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"const res = pm.response.json();\r",
									"\r",
									"pm.test(\"Response status code is 500\", () => {\r",
									"    pm.response.to.have.status(500);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response message is correct\", function () {\r",
									"    pm.expect(res.message).to.exist;\r",
									"    pm.expect(res.message).to.equal(\"Token expired! Login again\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "uueuue",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseURL}}/api/user/myPosts",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"api",
								"user",
								"myPosts"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Items – UnAuthorized User– Error",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"const res = pm.response.json();\r",
									"\r",
									"pm.test(\"Response status code is 500\", () => {\r",
									"    pm.response.to.have.status(500);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response message is correct\", function () {\r",
									"    pm.expect(res.message).to.exist;\r",
									"    pm.expect(res.message).to.equal(\"Please provide the bearer token\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseURL}}/api/user/myPosts",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"api",
								"user",
								"myPosts"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Create_Item",
			"item": [
				{
					"name": "Create Item – Valid inputs– Success",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let ranTitle = Array(6).fill().map(() => pm.variables.replaceIn(\"{{$randomAlphaNumeric}}\")).join('');\r",
									"pm.collectionVariables.set(\"ItemName\", ranTitle);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"const res = pm.response.json();\r",
									"\r",
									"pm.collectionVariables.set(\"ItemId\", res.post._id);\r",
									"\r",
									"\r",
									"pm.test(\"Status code is 200\", () => {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1 second\", () => {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"\r",
									"pm.test(\"Response has a success message\", () => {\r",
									"    pm.expect(res.message).to.exist;\r",
									"    pm.expect(res.message).to.equal(\"Item created successfully\");\r",
									"});\r",
									"\r",
									"pm.test(\"Post object is valid\", () => {\r",
									"    pm.expect(res.post).to.have.all.keys(\"title\", \"description\", \"author\", \"_id\", \"createdAt\", \"updatedAt\", \"__v\");\r",
									"    pm.expect(res.post.title).to.be.a(\"string\");\r",
									"    pm.expect(res.post.description).to.be.a(\"string\");\r",
									"    pm.expect(res.post.author).to.be.a(\"string\");\r",
									"    pm.expect(res.post._id).to.be.a(\"string\");\r",
									"    pm.expect(res.post.createdAt).to.be.a(\"string\");\r",
									"    pm.expect(res.post.updatedAt).to.be.a(\"string\");\r",
									"    pm.expect(res.post.__v).to.be.a(\"number\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"title\": \"Item-{{ItemName}}\",\r\n    \"description\": \"This is a test description.\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/api/post/create",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"api",
								"post",
								"create"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Item – Invalid BearerToken– Error",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let ranTitle = Array(6).fill().map(() => pm.variables.replaceIn(\"{{$randomAlphaNumeric}}\")).join('');\r",
									"pm.collectionVariables.set(\"ItemName\", ranTitle);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"const res = pm.response.json();\r",
									"\r",
									"pm.test(\"Response status code is 500\", () => {\r",
									"    pm.response.to.have.status(500);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response message is correct\", function () {\r",
									"    pm.expect(res.message).to.exist;\r",
									"    pm.expect(res.message).to.equal(\"Token expired! Login again\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "uueuue",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"title\": \"Item-{{ItemName}}\",\r\n    \"description\": \"This is a test description.\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/api/post/create",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"api",
								"post",
								"create"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Item – UnAuthorized User– Error",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let ranTitle = Array(6).fill().map(() => pm.variables.replaceIn(\"{{$randomAlphaNumeric}}\")).join('');\r",
									"pm.collectionVariables.set(\"ItemName\", ranTitle);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"const res = pm.response.json();\r",
									"\r",
									"pm.test(\"Response status code is 500\", () => {\r",
									"    pm.response.to.have.status(500);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response message is correct\", function () {\r",
									"    pm.expect(res.message).to.exist;\r",
									"    pm.expect(res.message).to.equal(\"Please provide the bearer token\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"title\": \"Item-{{ItemName}}\",\r\n    \"description\": \"This is a test description.\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/api/post/create",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"api",
								"post",
								"create"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Item – Empty title– Error",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let ranTitle = Array(6).fill().map(() => pm.variables.replaceIn(\"{{$randomAlphaNumeric}}\")).join('');\r",
									"pm.collectionVariables.set(\"ItemName\", ranTitle);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"   const res = pm.response.json();\r",
									"\r",
									"\r",
									"pm.test(\"Status code is 200 - StatusCode Validation\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Error message is 'Post validation failed: title: Don't enter empty task.'\", function () {\r",
									" \r",
									"    pm.expect(res.message).to.eql(\"Post validation failed: title: Don't enter empty task.\");\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Error name is 'ValidationError'\", function () {\r",
									"\r",
									"    pm.expect(res.name).to.eql(\"ValidationError\");\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Error details for 'title' are present\", function () {\r",
									"\r",
									"    pm.expect(res.errors).to.have.property(\"title\");\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Title error fields are correct\", function () {\r",
									"    const error = res.errors.title;\r",
									"\r",
									"    pm.expect(error).to.have.property(\"message\", \"Don't enter empty task.\");\r",
									"    pm.expect(error).to.have.property(\"path\", \"title\");\r",
									"    pm.expect(error).to.have.property(\"kind\", \"required\");\r",
									"    pm.expect(error).to.have.property(\"value\", \"\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"title\": \"\",\r\n    \"description\": \"This is a test description.\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/api/post/create",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"api",
								"post",
								"create"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Item – Empty description– Error",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let ranTitle = Array(6).fill().map(() => pm.variables.replaceIn(\"{{$randomAlphaNumeric}}\")).join('');\r",
									"pm.collectionVariables.set(\"ItemName\", ranTitle);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"pm.test(\"Status code is 200 - StatusCode Validation\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Error message is 'Post validation failed: description: Don't enter empty description.'\", function () {\r",
									"    const res = pm.response.json();\r",
									"    pm.expect(res.message).to.eql(\"Post validation failed: description: Don't enter empty description.\");\r",
									"});\r",
									"\r",
									"pm.test(\"Error name is 'ValidationError'\", function () {\r",
									"    const res = pm.response.json();\r",
									"    pm.expect(res.name).to.eql(\"ValidationError\");\r",
									"});\r",
									"\r",
									"pm.test(\"Error details for 'description' are present\", function () {\r",
									"    const res = pm.response.json();\r",
									"    pm.expect(res).to.have.property(\"errors\");\r",
									"    pm.expect(res.errors).to.have.property(\"description\");\r",
									"});\r",
									"\r",
									"pm.test(\"Description error fields are correct\", function () {\r",
									"    const error = pm.response.json().errors.description;\r",
									"    \r",
									"    pm.expect(error).to.have.property(\"message\", \"Don't enter empty description.\");\r",
									"    pm.expect(error).to.have.property(\"path\", \"description\");\r",
									"    pm.expect(error).to.have.property(\"kind\", \"required\");\r",
									"    pm.expect(error).to.have.property(\"value\", \"\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"title\": \"Item-{{ItemName}}\",\r\n    \"description\": \"\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/api/post/create",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"api",
								"post",
								"create"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Update_Item",
			"item": [
				{
					"name": "Update Item – Valid inputs– Success",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let ranTitle = Array(6).fill().map(() => pm.variables.replaceIn(\"{{$randomAlphaNumeric}}\")).join('');\r",
									"pm.collectionVariables.set(\"ItemName\", ranTitle);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"const res = pm.response.json();\r",
									"const requestData = JSON.parse(request.data);\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"\r",
									"pm.test(\"Response message is correct\", function () {\r",
									"    pm.expect(res.message).to.exist;\r",
									"    pm.expect(res.message).to.equal(\"Item updated successfully\");\r",
									"});\r",
									"\r",
									"pm.test(\"Title in response matches title in request\", function () {\r",
									"    pm.expect(res).to.have.property(\"post\");\r",
									"    pm.expect(res.post).to.have.property(\"title\", requestData.title);\r",
									"});\r",
									"\r",
									"pm.test(\"Post structure is valid\", function () {\r",
									"    pm.expect(res).to.have.property(\"post\");\r",
									"    pm.expect(res.post).to.have.all.keys(\r",
									"        \"_id\", \"title\", \"description\", \"author\", \"createdAt\", \"updatedAt\", \"__v\"\r",
									"    );\r",
									"});\r",
									"\r",
									"pm.test(\"Author structure is valid\", function () {\r",
									"    pm.expect(res.post).to.have.property(\"author\");\r",
									"    pm.expect(res.post.author).to.have.all.keys(\r",
									"        \"_id\", \"fullname\", \"email\", \"password\", \"postCount\", \"createdAt\", \"updatedAt\", \"__v\", \"id\"\r",
									"    );\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"id\": \"{{ItemId}}\",\r\n    \"title\": \"Item-{{ItemName}}\",\r\n    \"description\": \"This is a test description\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/api/post/update",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"api",
								"post",
								"update"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Item – Invalid BearerToken– Error",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let ranTitle = Array(6).fill().map(() => pm.variables.replaceIn(\"{{$randomAlphaNumeric}}\")).join('');\r",
									"pm.collectionVariables.set(\"ItemName\", ranTitle);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"const res = pm.response.json();\r",
									"\r",
									"pm.test(\"Response status code is 500\", () => {\r",
									"    pm.response.to.have.status(500);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response message is correct\", function () {\r",
									"    pm.expect(res.message).to.exist;\r",
									"    pm.expect(res.message).to.equal(\"Token expired! Login again\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "uueuue",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"id\": \"{{ItemId}}\",\r\n    \"title\": \"Item-{{ItemName}}\",\r\n    \"description\": \"This is a test description\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/api/post/update",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"api",
								"post",
								"update"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Item – UnAuthorized User– Error",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let ranTitle = Array(6).fill().map(() => pm.variables.replaceIn(\"{{$randomAlphaNumeric}}\")).join('');\r",
									"pm.collectionVariables.set(\"ItemName\", ranTitle);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"const res = pm.response.json();\r",
									"\r",
									"pm.test(\"Response status code is 500\", () => {\r",
									"    pm.response.to.have.status(500);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response message is correct\", function () {\r",
									"    pm.expect(res.message).to.exist;\r",
									"    pm.expect(res.message).to.equal(\"Please provide the bearer token\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"id\": \"{{ItemId}}\",\r\n    \"title\": \"Item-{{ItemName}}\",\r\n    \"description\": \"This is a test description\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/api/post/update",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"api",
								"post",
								"update"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Item – Empty ID– Error",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let ranTitle = Array(6).fill().map(() => pm.variables.replaceIn(\"{{$randomAlphaNumeric}}\")).join('');\r",
									"pm.collectionVariables.set(\"ItemName\", ranTitle);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"const res = pm.response.json();\r",
									"\r",
									"pm.test(\"Response status code is 500\", () => {\r",
									"    pm.response.to.have.status(500);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response message is correct\", function () {\r",
									"    pm.expect(res.message).to.exist;\r",
									"    pm.expect(res.message).to.equal(\"Id is not valid\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"id\": \"\",\r\n    \"title\": \"Item-{{ItemName}}\",\r\n    \"description\": \"This is a test description\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/api/post/update",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"api",
								"post",
								"update"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Item – Empty title– Error",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let ranTitle = Array(6).fill().map(() => pm.variables.replaceIn(\"{{$randomAlphaNumeric}}\")).join('');\r",
									"pm.collectionVariables.set(\"ItemName\", ranTitle);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"const res = pm.response.json();\r",
									"\r",
									"pm.test(\"Response status code is 500\", () => {\r",
									"    pm.response.to.have.status(500);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response message is correct\", function () {\r",
									"    pm.expect(res.message).to.exist;\r",
									"    pm.expect(res.message).to.equal(\"Title and description are required\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"id\": \"{{ItemId}}\",\r\n    \"title\": \"\",\r\n    \"description\": \"This is a test description\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/api/post/update",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"api",
								"post",
								"update"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Item – Empty description– Error",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let ranTitle = Array(6).fill().map(() => pm.variables.replaceIn(\"{{$randomAlphaNumeric}}\")).join('');\r",
									"pm.collectionVariables.set(\"ItemName\", ranTitle);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"const res = pm.response.json();\r",
									"\r",
									"pm.test(\"Response status code is 500\", () => {\r",
									"    pm.response.to.have.status(500);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"\r",
									"pm.test(\"Response message is correct\", function () {\r",
									"    pm.expect(res.message).to.exist;\r",
									"    pm.expect(res.message).to.equal(\"Title and description are required\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"id\": \"{{ItemId}}\",\r\n    \"title\": \"Item-{{ItemName}}\",\r\n    \"description\": \"\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/api/post/update",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"api",
								"post",
								"update"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Item – Invalid Id– Error",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let ranTitle = Array(6).fill().map(() => pm.variables.replaceIn(\"{{$randomAlphaNumeric}}\")).join('');\r",
									"pm.collectionVariables.set(\"ItemName\", ranTitle);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"const res = pm.response.json();\r",
									"\r",
									"pm.test(\"Response status code is 500\", () => {\r",
									"    pm.response.to.have.status(500);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"\r",
									"pm.test(\"Response message is correct\", function () {\r",
									"    pm.expect(res.message).to.exist;\r",
									"    pm.expect(res.message).to.equal(\"Id is not valid\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"id\": \"688625b15b763dee4044e\",\r\n    \"title\": \"Item-{{ItemName}}\",\r\n    \"description\": \"This is a test description\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/api/post/update",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"api",
								"post",
								"update"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Delete_Item",
			"item": [
				{
					"name": "Delete Item – Valid inputs– Success",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const res = pm.response.json();\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"  pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Message confirms deletion\", function () {\r",
									"  pm.expect(res.message).to.eql(\"Item deleted successfully\");\r",
									"});\r",
									"\r",
									"pm.test(\"Post structure is valid\", function () {\r",
									"    pm.expect(res).to.have.property(\"post\");\r",
									"    pm.expect(res.post).to.have.all.keys(\r",
									"        \"_id\", \"title\", \"description\", \"author\", \"createdAt\", \"updatedAt\", \"__v\"\r",
									"    );\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"id\": \"{{ItemId}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/api/post/delete",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"api",
								"post",
								"delete"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Item – Invalid BearerToken– Error",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"const res = pm.response.json();\r",
									"\r",
									"pm.test(\"Response status code is 500\", () => {\r",
									"    pm.response.to.have.status(500);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response message is correct\", function () {\r",
									"    pm.expect(res.message).to.exist;\r",
									"    pm.expect(res.message).to.equal(\"Token expired! Login again\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "uueuue",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"id\": \"{{ItemId}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/api/post/delete",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"api",
								"post",
								"delete"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Item – UnAuthorized User– Error",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"const res = pm.response.json();\r",
									"\r",
									"pm.test(\"Response status code is 500\", () => {\r",
									"    pm.response.to.have.status(500);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response message is correct\", function () {\r",
									"    pm.expect(res.message).to.exist;\r",
									"    pm.expect(res.message).to.equal(\"Please provide the bearer token\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"id\": \"{{ItemId}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/api/post/delete",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"api",
								"post",
								"delete"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Item – Invalid ID– Error",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"const res = pm.response.json();\r",
									"\r",
									"pm.test(\"Response status code is 500\", () => {\r",
									"    pm.response.to.have.status(500);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response message is correct\", function () {\r",
									"    pm.expect(res.message).to.exist;\r",
									"    pm.expect(res.message).to.equal(\"Id is not valid\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"id\": \"6886402c\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/api/post/delete",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"api",
								"post",
								"delete"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Item – Empty ID– Error",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"const res = pm.response.json();\r",
									"\r",
									"pm.test(\"Response status code is 500\", () => {\r",
									"    pm.response.to.have.status(500);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"\r",
									"pm.test(\"Response message is correct\", function () {\r",
									"    pm.expect(res.message).to.exist;\r",
									"    pm.expect(res.message).to.equal(\"Id is not valid\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"id\": \"\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/api/post/delete",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"api",
								"post",
								"delete"
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"auth": {
		"type": "bearer",
		"bearer": [
			{
				"key": "token",
				"value": "{{authToken}}",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "baseURL",
			"value": "http://localhost:4000",
			"type": "string"
		},
		{
			"key": "authToken",
			"value": ""
		},
		{
			"key": "sixCharCode",
			"value": ""
		},
		{
			"key": "ItemName",
			"value": ""
		},
		{
			"key": "ItemId",
			"value": ""
		}
	]
}